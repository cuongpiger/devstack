[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "LocalConf",
        "importPath": "devstack_local_conf",
        "description": "devstack_local_conf",
        "isExtraImport": true,
        "detail": "devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CreateEnginePlugin",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "Retry",
        "importPath": "requests.packages.urllib3.util.retry",
        "description": "requests.packages.urllib3.util.retry",
        "isExtraImport": true,
        "detail": "requests.packages.urllib3.util.retry",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "spawn",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "#needs_sphinx",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = [ 'sphinx.ext.autodoc',\n               'zuul_sphinx',\n               'openstackdocstheme',\n               'sphinxcontrib.blockdiag',\n               'sphinxcontrib.nwdiag' ]\n# openstackdocstheme options\nopenstackdocs_repo_name = 'openstack-dev/devstack'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "extensions = [ 'sphinx.ext.autodoc',\n               'zuul_sphinx',\n               'openstackdocstheme',\n               'sphinxcontrib.blockdiag',\n               'sphinxcontrib.nwdiag' ]\n# openstackdocstheme options\nopenstackdocs_repo_name = 'openstack-dev/devstack'\nopenstackdocs_pdf_link = True\nopenstackdocs_bug_project = 'devstack'\nopenstackdocs_bug_tag = ''",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_repo_name",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_repo_name = 'openstack-dev/devstack'\nopenstackdocs_pdf_link = True\nopenstackdocs_bug_project = 'devstack'\nopenstackdocs_bug_tag = ''\nopenstackdocs_auto_name = False\n# This repo is not tagged, so don't set versions\nopenstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_pdf_link",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_pdf_link = True\nopenstackdocs_bug_project = 'devstack'\nopenstackdocs_bug_tag = ''\nopenstackdocs_auto_name = False\n# This repo is not tagged, so don't set versions\nopenstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_bug_project",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_bug_project = 'devstack'\nopenstackdocs_bug_tag = ''\nopenstackdocs_auto_name = False\n# This repo is not tagged, so don't set versions\nopenstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_bug_tag",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_bug_tag = ''\nopenstackdocs_auto_name = False\n# This repo is not tagged, so don't set versions\nopenstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_auto_name",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_auto_name = False\n# This repo is not tagged, so don't set versions\nopenstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "openstackdocs_auto_version",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "openstackdocs_auto_version = False\nversion = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "version = ''\nrelease = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "release = ''\ntodo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "todo_include_todos",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "todo_include_todos = True\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'DevStack'\ncopyright = u'2014, OpenStack Foundation'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'DevStack'\ncopyright = u'2014, OpenStack Foundation'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'DevStack'\ncopyright = u'2014, OpenStack Foundation'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'DevStack'\ncopyright = u'2014, OpenStack Foundation'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "project = u'DevStack'\ncopyright = u'2014, OpenStack Foundation'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "copyright = u'2014, OpenStack Foundation'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#language",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "exclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = False\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = False\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = False\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'native'\n# A list of ignored prefixes for module index sorting.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "add_module_names",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "add_module_names = False\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'native'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['DevStack-doc.']\n# -- Options for man page output ----------------------------------------------\nman_pages = []",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "show_authors",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'native'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['DevStack-doc.']\n# -- Options for man page output ----------------------------------------------\nman_pages = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "pygments_style = 'native'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['DevStack-doc.']\n# -- Options for man page output ----------------------------------------------\nman_pages = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'openstackdocs'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "modindex_common_prefix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "modindex_common_prefix = ['DevStack-doc.']\n# -- Options for man page output ----------------------------------------------\nman_pages = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'openstackdocs'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "man_pages = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'openstackdocs'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "html_theme = 'openstackdocs'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_path",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_title",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_short_title",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_logo",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_favicon = None\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_domain_indices = False\n# If false, no index is generated.\nhtml_use_index = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_domain_indices = False\n# If false, no index is generated.\nhtml_use_index = False\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_domain_indices = False\n# If false, no index is generated.\nhtml_use_index = False\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "html_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "html_domain_indices = False\n# If false, no index is generated.\nhtml_use_index = False\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "html_use_index",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "html_use_index = False\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sphinx",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_copyright",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'DevStack-doc'\n# -- Options for LaTeX output --------------------------------------------------",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'DevStack-doc'\n# -- Options for LaTeX output --------------------------------------------------\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'doc-devstack.tex', u'DevStack Docs',",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'DevStack-doc'\n# -- Options for LaTeX output --------------------------------------------------\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'doc-devstack.tex', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'manual'),\n]",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "htmlhelp_basename = 'DevStack-doc'\n# -- Options for LaTeX output --------------------------------------------------\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'doc-devstack.tex', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'doc-devstack.tex', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for Texinfo output ------------------------------------------------",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_pagerefs",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_urls",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'DevStack-doc', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'DevStack-doc', 'DevStack documentation',",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#latex_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#latex_domain_indices = True\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'DevStack-doc', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'DevStack-doc', 'DevStack documentation',\n   'Miscellaneous'),\n]",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "texinfo_documents = [\n  ('index', 'DevStack-doc', u'DevStack Docs',\n   u'OpenStack DevStack Team', 'DevStack-doc', 'DevStack documentation',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_appendices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# -- Options for Epub output ---------------------------------------------------\n# Bibliographic Dublin Core info.\nepub_title = u'DevStack Documentation'\nepub_author = u'OpenStack DevStack Team'\nepub_publisher = u'OpenStack DevStack Team'",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_domain_indices",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# -- Options for Epub output ---------------------------------------------------\n# Bibliographic Dublin Core info.\nepub_title = u'DevStack Documentation'\nepub_author = u'OpenStack DevStack Team'\nepub_publisher = u'OpenStack DevStack Team'\nepub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_show_urls",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#texinfo_show_urls = 'footnote'\n# -- Options for Epub output ---------------------------------------------------\n# Bibliographic Dublin Core info.\nepub_title = u'DevStack Documentation'\nepub_author = u'OpenStack DevStack Team'\nepub_publisher = u'OpenStack DevStack Team'\nepub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_title",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "epub_title = u'DevStack Documentation'\nepub_author = u'OpenStack DevStack Team'\nepub_publisher = u'OpenStack DevStack Team'\nepub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_author",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "epub_author = u'OpenStack DevStack Team'\nepub_publisher = u'OpenStack DevStack Team'\nepub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_publisher",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "epub_publisher = u'OpenStack DevStack Team'\nepub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#epub_identifier = ''",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "epub_copyright",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "epub_copyright = u'2014, OpenStack DevStack Team'\n# The language of the text. It defaults to the language option\n# or en if the language is not set.\n#epub_language = ''\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#epub_identifier = ''\n# A unique identification for the text.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_language",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_language = ''\n# The scheme of the identifier. Typical schemes are ISBN or URL.\n#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#epub_identifier = ''\n# A unique identification for the text.\n#epub_uid = ''\n# A tuple containing the cover image and cover page html template filenames.\n#epub_cover = ()",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_scheme",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_scheme = ''\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#epub_identifier = ''\n# A unique identification for the text.\n#epub_uid = ''\n# A tuple containing the cover image and cover page html template filenames.\n#epub_cover = ()\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_identifier",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_identifier = ''\n# A unique identification for the text.\n#epub_uid = ''\n# A tuple containing the cover image and cover page html template filenames.\n#epub_cover = ()\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_pre_files = []\n# HTML files shat should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_uid",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_uid = ''\n# A tuple containing the cover image and cover page html template filenames.\n#epub_cover = ()\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_pre_files = []\n# HTML files shat should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_post_files = []\n# A list of files that should not be packed into the epub file.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_cover",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_cover = ()\n# HTML files that should be inserted before the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_pre_files = []\n# HTML files shat should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_post_files = []\n# A list of files that should not be packed into the epub file.\n#epub_exclude_files = []\n# The depth of the table of contents in toc.ncx.",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_pre_files",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_pre_files = []\n# HTML files shat should be inserted after the pages created by sphinx.\n# The format is a list of tuples containing the path and title.\n#epub_post_files = []\n# A list of files that should not be packed into the epub file.\n#epub_exclude_files = []\n# The depth of the table of contents in toc.ncx.\n#epub_tocdepth = 3\n# Allow duplicate toc entries.\n#epub_tocdup = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_post_files",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_post_files = []\n# A list of files that should not be packed into the epub file.\n#epub_exclude_files = []\n# The depth of the table of contents in toc.ncx.\n#epub_tocdepth = 3\n# Allow duplicate toc entries.\n#epub_tocdup = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_exclude_files",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_exclude_files = []\n# The depth of the table of contents in toc.ncx.\n#epub_tocdepth = 3\n# Allow duplicate toc entries.\n#epub_tocdup = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_tocdepth",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_tocdepth = 3\n# Allow duplicate toc entries.\n#epub_tocdup = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "#epub_tocdup",
        "kind": 5,
        "importPath": "doc.source.conf",
        "description": "doc.source.conf",
        "peekOfCode": "#epub_tocdup = True",
        "detail": "doc.source.conf",
        "documentation": {}
    },
    {
        "label": "DependencyGraph",
        "kind": 6,
        "importPath": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "description": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "peekOfCode": "class DependencyGraph(object):\n    # This is based on the JobGraph from Zuul.\n    def __init__(self):\n        self._names = set()\n        self._dependencies = {}  # dependent_name -> set(parent_names)\n    def add(self, name, dependencies):\n        # Append the dependency information\n        self._dependencies.setdefault(name, set())\n        try:\n            for dependency in dependencies:",
        "detail": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "VarGraph",
        "kind": 6,
        "importPath": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "description": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "peekOfCode": "class VarGraph(DependencyGraph):\n    def __init__(self, vars):\n        super(VarGraph, self).__init__()\n        self.vars = {}\n        self._varnames = set()\n        for k, v in vars.items():\n            self._varnames.add(k)\n        for k, v in vars.items():\n            self._addVar(k, str(v))\n    bash_var_re = re.compile(r'\\$\\{?(\\w+)')",
        "detail": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "PluginGraph",
        "kind": 6,
        "importPath": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "description": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "peekOfCode": "class PluginGraph(DependencyGraph):\n    def __init__(self, base_dir, plugins):\n        super(PluginGraph, self).__init__()\n        # The dependency trees expressed by all the plugins we found\n        # (which may be more than those the job is using).\n        self._plugin_dependencies = {}\n        self.loadPluginNames(base_dir)\n        self.plugins = {}\n        self._pluginnames = set()\n        for k, v in plugins.items():",
        "detail": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "LocalConf",
        "kind": 6,
        "importPath": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "description": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "peekOfCode": "class LocalConf(object):\n    def __init__(self, localrc, localconf, base_services, services, plugins,\n                 base_dir, projects, project, tempest_plugins):\n        self.localrc = []\n        self.warnings = []\n        self.meta_sections = {}\n        self.plugin_deps = {}\n        self.base_dir = base_dir\n        self.projects = projects\n        self.project = project",
        "detail": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "description": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "peekOfCode": "def main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            plugins=dict(type='dict'),\n            base_services=dict(type='list'),\n            services=dict(type='dict'),\n            localrc=dict(type='dict'),\n            local_conf=dict(type='dict'),\n            base_dir=dict(type='path'),\n            path=dict(type='str'),",
        "detail": "roles.write-devstack-local-conf.library.devstack_local_conf",
        "documentation": {}
    },
    {
        "label": "TestDevstackLocalConf",
        "kind": 6,
        "importPath": "roles.write-devstack-local-conf.library.test",
        "description": "roles.write-devstack-local-conf.library.test",
        "peekOfCode": "class TestDevstackLocalConf(unittest.TestCase):\n    @staticmethod\n    def _init_localconf(p):\n        lc = LocalConf(p.get('localrc'),\n                       p.get('local_conf'),\n                       p.get('base_services'),\n                       p.get('services'),\n                       p.get('plugins'),\n                       p.get('base_dir'),\n                       p.get('projects'),",
        "detail": "roles.write-devstack-local-conf.library.test",
        "documentation": {}
    },
    {
        "label": "LogCursorEventsPlugin",
        "kind": 6,
        "importPath": "tools.dbcounter.dbcounter",
        "description": "tools.dbcounter.dbcounter",
        "peekOfCode": "class LogCursorEventsPlugin(CreateEnginePlugin):\n    def __init__(self, url, kwargs):\n        self.db_name = url.database\n        LOG.info('Registered counter for database %s' % self.db_name)\n        new_url = sqlalchemy.engine.URL.create(url.drivername,\n                                               url.username,\n                                               url.password,\n                                               url.host,\n                                               url.port,\n                                               'stats')",
        "detail": "tools.dbcounter.dbcounter",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "tools.dbcounter.dbcounter",
        "description": "tools.dbcounter.dbcounter",
        "peekOfCode": "LOG = logging.getLogger(__name__)\n# The theory of operation here is that we register this plugin with\n# sqlalchemy via an entry_point. It gets loaded by virtue of plugin=\n# being in the database connection URL, which gives us an opportunity\n# to hook the engines that get created.\n#\n# We opportunistically spawn a thread, which we feed \"hits\" to over a\n# queue, and which occasionally writes those hits to a special\n# database called 'stats'. We access that database with the same user,\n# pass, and host as the main connection URL for simplicity.",
        "detail": "tools.dbcounter.dbcounter",
        "documentation": {}
    },
    {
        "label": "is_in_wanted_namespace",
        "kind": 2,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "def is_in_wanted_namespace(proj):\n    # only interested in openstack or x namespace (e.g. not retired\n    # stackforge, etc).\n    #\n    # openstack/openstack \"super-repo\" of openstack projects as\n    # submodules, that can cause gitea to 500 timeout and thus stop\n    # this script.  Skip it.\n    if proj.startswith('stackforge/') or \\\n       proj.startswith('stackforge-attic/') or \\\n       proj == \"openstack/openstack\":",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "has_devstack_plugin",
        "kind": 2,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "def has_devstack_plugin(session, proj):\n    # Don't link in the deb packaging repos\n    if \"openstack/deb-\" in proj:\n        return False\n    r = session.get(\"https://opendev.org/%s/raw/branch/master/devstack/plugin.sh\" % proj)\n    return r.status_code == 200\nlogging.debug(\"Getting project list from %s\" % url)\nr = requests.get(url)\nprojects = sorted(filter(is_in_wanted_namespace, json.loads(r.text[4:])))\nlogging.debug(\"Found %d projects\" % len(projects))",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "url = 'https://review.opendev.org/projects/'\n# This is what a project looks like\n'''\n  \"openstack-attic/akanda\": {\n    \"id\": \"openstack-attic%2Fakanda\",\n    \"state\": \"READ_ONLY\"\n  },\n'''\ndef is_in_wanted_namespace(proj):\n    # only interested in openstack or x namespace (e.g. not retired",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "r = requests.get(url)\nprojects = sorted(filter(is_in_wanted_namespace, json.loads(r.text[4:])))\nlogging.debug(\"Found %d projects\" % len(projects))\ns = requests.Session()\n# sometimes gitea gives us a 500 error; retry sanely\n#  https://stackoverflow.com/a/35636367\nretries = Retry(total=3, backoff_factor=1,\n                status_forcelist=[ 500 ])\ns.mount('https://', HTTPAdapter(max_retries=retries))\nfound_plugins = filter(functools.partial(has_devstack_plugin, s), projects)",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "projects",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "projects = sorted(filter(is_in_wanted_namespace, json.loads(r.text[4:])))\nlogging.debug(\"Found %d projects\" % len(projects))\ns = requests.Session()\n# sometimes gitea gives us a 500 error; retry sanely\n#  https://stackoverflow.com/a/35636367\nretries = Retry(total=3, backoff_factor=1,\n                status_forcelist=[ 500 ])\ns.mount('https://', HTTPAdapter(max_retries=retries))\nfound_plugins = filter(functools.partial(has_devstack_plugin, s), projects)\nfor project in found_plugins:",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "s = requests.Session()\n# sometimes gitea gives us a 500 error; retry sanely\n#  https://stackoverflow.com/a/35636367\nretries = Retry(total=3, backoff_factor=1,\n                status_forcelist=[ 500 ])\ns.mount('https://', HTTPAdapter(max_retries=retries))\nfound_plugins = filter(functools.partial(has_devstack_plugin, s), projects)\nfor project in found_plugins:\n    print(project)",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "retries",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "retries = Retry(total=3, backoff_factor=1,\n                status_forcelist=[ 500 ])\ns.mount('https://', HTTPAdapter(max_retries=retries))\nfound_plugins = filter(functools.partial(has_devstack_plugin, s), projects)\nfor project in found_plugins:\n    print(project)",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "found_plugins",
        "kind": 5,
        "importPath": "tools.generate-devstack-plugins-list",
        "description": "tools.generate-devstack-plugins-list",
        "peekOfCode": "found_plugins = filter(functools.partial(has_devstack_plugin, s), projects)\nfor project in found_plugins:\n    print(project)",
        "detail": "tools.generate-devstack-plugins-list",
        "documentation": {}
    },
    {
        "label": "tryint",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def tryint(value):\n    try:\n        return int(value)\n    except (ValueError, TypeError):\n        return value\ndef get_service_stats(service):\n    stats = {'MemoryCurrent': 0}\n    output = subprocess.check_output(['/usr/bin/systemctl', 'show', service] +\n                                     ['-p%s' % stat for stat in stats])\n    for line in output.decode().split('\\n'):",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_service_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_service_stats(service):\n    stats = {'MemoryCurrent': 0}\n    output = subprocess.check_output(['/usr/bin/systemctl', 'show', service] +\n                                     ['-p%s' % stat for stat in stats])\n    for line in output.decode().split('\\n'):\n        if not line:\n            continue\n        stat, val = line.split('=')\n        stats[stat] = tryint(val)\n    return stats",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_services_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_services_stats():\n    services = [os.path.basename(s) for s in\n                glob.glob('/etc/systemd/system/devstack@*.service')] + \\\n                ['apache2.service']\n    return [dict(service=service, **get_service_stats(service))\n            for service in services]\ndef get_process_stats(proc):\n    cmdline = proc.cmdline()\n    if 'python' in cmdline[0]:\n        cmdline = cmdline[1:]",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_process_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_process_stats(proc):\n    cmdline = proc.cmdline()\n    if 'python' in cmdline[0]:\n        cmdline = cmdline[1:]\n    return {'cmd': cmdline[0],\n            'pid': proc.pid,\n            'args': ' '.join(cmdline[1:]),\n            'rss': proc.memory_info().rss}\ndef get_processes_stats(matches):\n    me = os.getpid()",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_processes_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_processes_stats(matches):\n    me = os.getpid()\n    procs = psutil.process_iter()\n    def proc_matches(proc):\n        return me != proc.pid and any(\n            re.search(match, ' '.join(proc.cmdline()))\n            for match in matches)\n    return [\n        get_process_stats(proc)\n        for proc in procs",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_db_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_db_stats(host, user, passwd):\n    dbs = []\n    try:\n        db = pymysql.connect(host=host, user=user, password=passwd,\n                             database='stats',\n                             cursorclass=pymysql.cursors.DictCursor)\n    except pymysql.err.OperationalError as e:\n        if 'Unknown database' in str(e):\n            print('No stats database; assuming devstack failed',\n                  file=sys.stderr)",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_http_stats_for_log",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_http_stats_for_log(logfile):\n    stats = {}\n    apache_fields = ('host', 'a', 'b', 'date', 'tz', 'request', 'status',\n                     'length', 'c', 'agent')\n    ignore_agents = ('curl', 'uwsgi', 'nova-status')\n    ignored_services = set()\n    for line in csv.reader(open(logfile), delimiter=' '):\n        fields = dict(zip(apache_fields, line))\n        if len(fields) != len(apache_fields):\n            # Not a combined access log, so we can bail completely",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_http_stats",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_http_stats(logfiles):\n    return list(itertools.chain.from_iterable(get_http_stats_for_log(log)\n                                              for log in logfiles))\ndef get_report_info():\n    return {\n        'timestamp': datetime.datetime.now().isoformat(),\n        'hostname': socket.gethostname(),\n        'version': 2,\n    }\nif __name__ == '__main__':",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "get_report_info",
        "kind": 2,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "def get_report_info():\n    return {\n        'timestamp': datetime.datetime.now().isoformat(),\n        'hostname': socket.gethostname(),\n        'version': 2,\n    }\nif __name__ == '__main__':\n    process_defaults = ['privsep', 'mysqld', 'erlang', 'etcd']\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--db-user', default='root',",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "tools.get-stats",
        "description": "tools.get-stats",
        "peekOfCode": "LOG = logging.getLogger('perf')\n# https://www.elastic.co/blog/found-crash-elasticsearch#mapping-explosion\ndef tryint(value):\n    try:\n        return int(value)\n    except (ValueError, TypeError):\n        return value\ndef get_service_stats(service):\n    stats = {'MemoryCurrent': 0}\n    output = subprocess.check_output(['/usr/bin/systemctl', 'show', service] +",
        "detail": "tools.get-stats",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tools.mlock_report",
        "description": "tools.mlock_report",
        "peekOfCode": "def main():\n    try:\n        print(_get_report())\n    except Exception as e:\n        print(\"Failure listing processes locking memory: %s\" % str(e))\n        raise\ndef _get_report():\n    mlock_users = []\n    for proc in psutil.process_iter():\n        # sadly psutil does not expose locked pages info, that's why we",
        "detail": "tools.mlock_report",
        "documentation": {}
    },
    {
        "label": "LCK_SUMMARY_REGEX",
        "kind": 5,
        "importPath": "tools.mlock_report",
        "description": "tools.mlock_report",
        "peekOfCode": "LCK_SUMMARY_REGEX = re.compile(\n    \"^VmLck:\\s+(?P<locked>[\\d]+)\\s+kB\", re.MULTILINE)\ndef main():\n    try:\n        print(_get_report())\n    except Exception as e:\n        print(\"Failure listing processes locking memory: %s\" % str(e))\n        raise\ndef _get_report():\n    mlock_users = []",
        "detail": "tools.mlock_report",
        "documentation": {}
    },
    {
        "label": "get_options",
        "kind": 2,
        "importPath": "tools.outfilter",
        "description": "tools.outfilter",
        "peekOfCode": "def get_options():\n    parser = argparse.ArgumentParser(\n        description='Filter output by DevStack and friends')\n    parser.add_argument('-o', '--outfile',\n                        help='Output file for content',\n                        default=None)\n    # NOTE(ianw): This is intended for the case where your stdout is\n    # being captured by something like ansible which independently\n    # logs timestamps on the lines it receives.  Note that if using a\n    # output file, those log lines are still timestamped.",
        "detail": "tools.outfilter",
        "documentation": {}
    },
    {
        "label": "skip_line",
        "kind": 2,
        "importPath": "tools.outfilter",
        "description": "tools.outfilter",
        "peekOfCode": "def skip_line(line):\n    \"\"\"Should we skip this line.\"\"\"\n    return IGNORE_LINES.search(line) is not None\ndef main():\n    opts = get_options()\n    outfile = None\n    if opts.outfile:\n        # note, binary mode so we can do unbuffered output.\n        outfile = open(opts.outfile, 'ab', 0)\n    # Otherwise fileinput reprocess args as files",
        "detail": "tools.outfilter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tools.outfilter",
        "description": "tools.outfilter",
        "peekOfCode": "def main():\n    opts = get_options()\n    outfile = None\n    if opts.outfile:\n        # note, binary mode so we can do unbuffered output.\n        outfile = open(opts.outfile, 'ab', 0)\n    # Otherwise fileinput reprocess args as files\n    sys.argv = []\n    for line in iter(sys.stdin.readline, ''):\n        # put skip lines here",
        "detail": "tools.outfilter",
        "documentation": {}
    },
    {
        "label": "IGNORE_LINES",
        "kind": 5,
        "importPath": "tools.outfilter",
        "description": "tools.outfilter",
        "peekOfCode": "IGNORE_LINES = re.compile('(set \\+o|xtrace)')\nHAS_DATE = re.compile('^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\|')\ndef get_options():\n    parser = argparse.ArgumentParser(\n        description='Filter output by DevStack and friends')\n    parser.add_argument('-o', '--outfile',\n                        help='Output file for content',\n                        default=None)\n    # NOTE(ianw): This is intended for the case where your stdout is\n    # being captured by something like ansible which independently",
        "detail": "tools.outfilter",
        "documentation": {}
    },
    {
        "label": "HAS_DATE",
        "kind": 5,
        "importPath": "tools.outfilter",
        "description": "tools.outfilter",
        "peekOfCode": "HAS_DATE = re.compile('^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3} \\|')\ndef get_options():\n    parser = argparse.ArgumentParser(\n        description='Filter output by DevStack and friends')\n    parser.add_argument('-o', '--outfile',\n                        help='Output file for content',\n                        default=None)\n    # NOTE(ianw): This is intended for the case where your stdout is\n    # being captured by something like ansible which independently\n    # logs timestamps on the lines it receives.  Note that if using a",
        "detail": "tools.outfilter",
        "documentation": {}
    },
    {
        "label": "UpdateCloudsYaml",
        "kind": 6,
        "importPath": "tools.update_clouds_yaml",
        "description": "tools.update_clouds_yaml",
        "peekOfCode": "class UpdateCloudsYaml(object):\n    def __init__(self, args):\n        if args.file:\n            self._clouds_path = args.file\n            self._create_directory = False\n        else:\n            self._clouds_path = os.path.expanduser(\n                '~/.config/openstack/clouds.yaml')\n            self._create_directory = True\n        self._clouds = {}",
        "detail": "tools.update_clouds_yaml",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tools.update_clouds_yaml",
        "description": "tools.update_clouds_yaml",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser('Update clouds.yaml file.')\n    parser.add_argument('--file')\n    parser.add_argument('--os-cloud', required=True)\n    parser.add_argument('--os-region-name', default='RegionOne')\n    parser.add_argument('--os-identity-api-version', default='3')\n    parser.add_argument('--os-volume-api-version', default='3')\n    parser.add_argument('--os-cacert')\n    parser.add_argument('--os-auth-url', required=True)\n    parser.add_argument('--os-username', required=True)",
        "detail": "tools.update_clouds_yaml",
        "documentation": {}
    },
    {
        "label": "get_options",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def get_options():\n    parser = argparse.ArgumentParser(\n        description='Dump world state for debugging')\n    parser.add_argument('-d', '--dir',\n                        default='.',\n                        help='Output directory for worlddump')\n    parser.add_argument('-n', '--name',\n                        default='',\n                        help='Additional name to tag into file')\n    return parser.parse_args()",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def filename(dirname, name=\"\"):\n    now = datetime.datetime.utcnow()\n    fmt = \"worlddump-%Y-%m-%d-%H%M%S\"\n    if name:\n        fmt += \"-\" + name\n    fmt += \".txt\"\n    return os.path.join(dirname, now.strftime(fmt))\ndef warn(msg):\n    print(\"WARN: %s\" % msg)\ndef _dump_cmd(cmd):",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def warn(msg):\n    print(\"WARN: %s\" % msg)\ndef _dump_cmd(cmd):\n    print(cmd)\n    print(\"-\" * len(cmd))\n    print()\n    try:\n        subprocess.check_call(cmd, shell=True)\n        print()\n    except subprocess.CalledProcessError as e:",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "disk_space",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def disk_space():\n    # the df output\n    _header(\"File System Summary\")\n    dfraw = os.popen(\"df -Ph\").read()\n    df = [s.split() for s in dfraw.splitlines()]\n    for fs in df:\n        try:\n            if int(fs[4][:-1]) > 95:\n                warn(\"Device %s (%s) is %s full, might be an issue\" % (\n                    fs[0], fs[5], fs[4]))",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "ebtables_dump",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def ebtables_dump():\n    tables = ['filter', 'nat']\n    _header(\"EB Tables Dump\")\n    if not _find_cmd('ebtables'):\n        return\n    for table in tables:\n        _dump_cmd(\"sudo ebtables -t %s -L\" % table)\ndef iptables_dump():\n    tables = ['filter', 'nat', 'mangle']\n    _header(\"IP Tables Dump\")",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "iptables_dump",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def iptables_dump():\n    tables = ['filter', 'nat', 'mangle']\n    _header(\"IP Tables Dump\")\n    for table in tables:\n        _dump_cmd(\"sudo iptables --line-numbers -L -nv -t %s\" % table)\ndef _netns_list():\n    process = subprocess.Popen(['ip', 'netns'], stdout=subprocess.PIPE)\n    stdout, _ = process.communicate()\n    # NOTE(jlvillal): Sometimes 'ip netns list' can return output like:\n    #   qrouter-0805fd7d-c493-4fa6-82ca-1c6c9b23cd9e (id: 1)",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "network_dump",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def network_dump():\n    _header(\"Network Dump\")\n    _dump_cmd(\"bridge link\")\n    _dump_cmd(\"ip link show type bridge\")\n    ip_cmds = [\"neigh\", \"addr\", \"route\", \"-6 route\"]\n    for cmd in ip_cmds + ['netns']:\n        _dump_cmd(\"ip %s\" % cmd)\n    for netns_ in _netns_list():\n        for cmd in ip_cmds:\n            args = {'netns': bytes.decode(netns_), 'cmd': cmd}",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "ovs_dump",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def ovs_dump():\n    _header(\"Open vSwitch Dump\")\n    # NOTE(cdent): If we're not using neutron + ovs these commands\n    # will not be present so\n    if not _find_cmd('ovs-vsctl'):\n        return\n    bridges = _bridge_list()\n    ofctl_cmds = ('show', 'dump-ports-desc', 'dump-ports', 'dump-flows')\n    ofp_max = _get_ofp_version()\n    vers = 'OpenFlow10'",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "process_list",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def process_list():\n    _header(\"Process Listing\")\n    _dump_cmd(\"ps axo \"\n              \"user,ppid,pid,pcpu,pmem,vsz,rss,tty,stat,start,time,args\")\ndef compute_consoles():\n    _header(\"Compute consoles\")\n    for root, _, filenames in os.walk('/opt/stack'):\n        for filename in fnmatch.filter(filenames, 'console.log'):\n            fullpath = os.path.join(root, filename)\n            _dump_cmd(\"sudo cat %s\" % fullpath)",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "compute_consoles",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def compute_consoles():\n    _header(\"Compute consoles\")\n    for root, _, filenames in os.walk('/opt/stack'):\n        for filename in fnmatch.filter(filenames, 'console.log'):\n            fullpath = os.path.join(root, filename)\n            _dump_cmd(\"sudo cat %s\" % fullpath)\ndef guru_meditation_reports():\n    for service in GMR_PROCESSES:\n        _header(\"%s Guru Meditation Report\" % service)\n        try:",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "guru_meditation_reports",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def guru_meditation_reports():\n    for service in GMR_PROCESSES:\n        _header(\"%s Guru Meditation Report\" % service)\n        try:\n            subprocess.check_call(['pgrep', '-f', service])\n        except subprocess.CalledProcessError:\n            print(\"Skipping as %s does not appear to be running\" % service)\n            continue\n        _dump_cmd(\"killall -e -USR2 %s\" % service)\n        print(\"guru meditation report in %s log\" % service)",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "var_core",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def var_core():\n    if os.path.exists('/var/core'):\n        _header(\"/var/core dumps\")\n        # NOTE(ianw) : see DEBUG_LIBVIRT_COREDUMPS.  We could think\n        # about getting backtraces out of these.  There are other\n        # tools out there that can do that sort of thing though.\n        _dump_cmd(\"ls -ltrah /var/core\")\ndef disable_stdio_buffering():\n    # re-open STDOUT as binary, then wrap it in a\n    # TextIOWrapper, and write through everything.",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "disable_stdio_buffering",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def disable_stdio_buffering():\n    # re-open STDOUT as binary, then wrap it in a\n    # TextIOWrapper, and write through everything.\n    binary_stdout = io.open(sys.stdout.fileno(), 'wb', 0)\n    sys.stdout = io.TextIOWrapper(binary_stdout, write_through=True)\ndef main():\n    opts = get_options()\n    fname = filename(opts.dir, opts.name)\n    print(\"World dumping... see %s for details\" % fname)\n    disable_stdio_buffering()",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "def main():\n    opts = get_options()\n    fname = filename(opts.dir, opts.name)\n    print(\"World dumping... see %s for details\" % fname)\n    disable_stdio_buffering()\n    with io.open(fname, 'w') as f:\n        os.dup2(f.fileno(), sys.stdout.fileno())\n        disk_space()\n        process_list()\n        network_dump()",
        "detail": "tools.worlddump",
        "documentation": {}
    },
    {
        "label": "GMR_PROCESSES",
        "kind": 5,
        "importPath": "tools.worlddump",
        "description": "tools.worlddump",
        "peekOfCode": "GMR_PROCESSES = (\n    'nova-compute',\n    'neutron-dhcp-agent',\n    'neutron-l3-agent',\n    'neutron-linuxbridge-agent',\n    'neutron-metadata-agent',\n    'neutron-openvswitch-agent',\n    'cinder-volume',\n)\ndef get_options():",
        "detail": "tools.worlddump",
        "documentation": {}
    }
]